-- Plugin for Lightware Devices by Solo Works London
-- Built in Lua
-- For source, contact https://soloworks.co.uk

PluginInfo = {
    Name = "Lightware~Video Matrix", -- The tilde here indicates folder structure in the Shematic Elements pane
    Version = "0.1",
    Id = "SoloWorks.Lightware.VideoMatrix", -- show this is just a unique id. Show some commented out 'fun' unique ids
    Description = "Control for Lightware range of Video Matrix & Switchers",
    ShowDebug = true,
    Author = "Solo Works London"
}

-- Once you've drawn your plugin in Designer, you can determine what colors you use a lot. Save yourself some time by putting them in a table, and then simply calling them later.
local Colors = {
    White = {255, 255, 255},
    Black = {0, 0, 0},
    Red = {255, 0, 0},
    Green = {0, 255, 0}
}

local MaxSources = 4
-- We can let users determine some of the plugin properties by exposing them here
-- While this function can be very useful, it is completely optional and not always needed.
-- If no Properties are set here, only the position and fill properties of your plugin will show in the Properties pane
function GetProperties()
    props = {
        {
            Name = "IP Address",
            Type = "string",
            Value = "127.0.0.1"
        },
        {
            Name = "Source Count",
            Type = "integer",
            Min = 2,
            Max = MaxSources,
            Value = 2
        }
    }
    return props
end

-- The below function is optional (like GetProperties() is), but it can allow further customization of what users can and can't do with your plugin.
-- In this example, when Model 1 is selected in the properties pane, the ability to modify some of the properties will be hidden, only allowing customization with Model 2
-- Another application of this is if you have different input/output types for different models, and want those properties to be dynamic in the Properties pane
function RectifyProperties(props)
    return props
end

-- The below function is where you will populate the controls for your plugin.
-- If you've written some of the Runtime code already, simply use the control names you populated in Text Controller/Control Script, and use their Properties to inform the values here
-- ControlType can be Button, Knob, Indicator or Text
-- ButtonType ( ControlType == Button ) can be Momentary, Toggle or Trigger
-- IndicatorType ( ControlType == Indicator ) can be Led, Meter, Text or Status
-- ControlUnit ( ControlType == Knob ) can be Hz, Float, Integer, Pan, Percent, Position or Seconds
function GetControls(props)
    ctls = {
        -- System Pins
        {
            Name = "Online",
            ControlType = "Indicator",
            IndicatorType = "Led",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "IPAddress",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Both",
            Count = 1,
            UserPin = true
        },
        {
            Name = "Model",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "SerialNumber",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "SoftwareVersion",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "Temperature",
            ControlType = "Knob",
            IndicatorType = "Integer",
            Min = 0,
            Max = 100,
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        -- Source Ports
        {
            Name = "VideoSourceSignal",
            ControlType = "Indicator",
            IndicatorType = "Led",
            PinStyle = "Output",
            Count = MaxSources,
            UserPin = true
        },
        -- Destination Ports
        {
            Name = "VideoDestSource",
            ControlType = "Knob",
            ControlUnit = "Integer",
            Min = 1,
            Max = MaxSources,
            PinStyle = "Both",
            Count = 2,
            UserPin = true
        },
        {
            Name = "VideoDestSourceAll",
            ControlType = "Knob",
            ControlUnit = "Integer",
            Min = 1,
            Max = MaxSources,
            PinStyle = "Input",
            Count = 1
            --UserPin = true
        }
    }
    return ctls
end

-- Variable holding Page Names for ease
local pagenames = {"Display"}

-- This function allows you to populate pages in your plugin.
function GetPages(props)
    pages = {}
    table.insert(pages, {name = pagenames[1]})
    return pages
end

-- This function allows you to layout pages in your plugin.
function GetControlLayout(props)
    local layout = {}

    graphics = {
        {
            Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
            Text = "Info",
            HTextAlign = "Left",
            Fill = Colors.White,
            CornerRadius = 8,
            StrokeColor = Colors.Black,
            StrokeWidth = 1,
            Position = {0, 0},
            Size = {220, 140} -- The width of the main GroupBox is dependent on how many channels the user specified. More channels means a wider group box
        },
        {
            Type = "Text",
            Text = "Online:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, 0},
            Size = {100, 20}
        },
        {
            Type = "Text",
            Text = "IP Address:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, 20},
            Size = {100, 20}
        },
        {
            Type = "Text",
            Text = "Model:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, 40},
            Size = {100, 20}
        },
        {
            Type = "Text",
            Text = "Serial Number:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, 60},
            Size = {100, 20}
        },
        {
            Type = "Text",
            Text = "Software:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, 80},
            Size = {100, 20}
        },
        {
            Type = "Text",
            Text = "Temp(Â°C):",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, 100},
            Size = {100, 20}
        },
        {
            Type = "GroupBox",
            Text = "State",
            HTextAlign = "Left",
            Fill = Colors.White,
            CornerRadius = 8,
            StrokeColor = Colors.Black,
            StrokeWidth = 1,
            Position = {0, 150},
            Size = {220, 170}
        }
    }

    -- System
    layout["Online"] = {
        PrettyName = "System~Online",
        Style = "Indicator",
        Color = {0, 255, 0},
        Position = {100, 00},
        Size = {20, 20}
    }
    layout["IPAddress"] = {
        PrettyName = "System~IP Address",
        Style = "TextBox",
        Position = {100, 20},
        Size = {100, 20}
    }
    layout["Model"] = {
        PrettyName = "System~Model Name",
        Style = "Text",
        Position = {100, 40},
        Size = {100, 20}
    }
    layout["SerialNumber"] = {
        PrettyName = "System~Serial Number",
        Style = "Text",
        Position = {100, 60},
        Size = {100, 20}
    }
    layout["SoftwareVersion"] = {
        PrettyName = "System~Software Version",
        Style = "Text",
        Position = {100, 80},
        Size = {100, 20}
    }
    layout["Temperature"] = {
        PrettyName = "System~Temperature",
        Style = "Text",
        Color = {223, 0, 36},
        Position = {100, 100},
        Size = {100, 20}
    }

    -- Source Ports
    for s = 1, props["Source Count"].Value do
        layout["VideoSourceSignal " .. s] = {
            PrettyName = string.format("Source%02i~Signal", s),
            Style = "Indicator",
            Color = {0, 255, 0},
            Position = {10, 155 + (s * 20)},
            Size = {20, 20}
        }
        -- Add Label
        table.insert(
            graphics,
            {
                Type = "Text",
                Text = string.format("Source%02i Signal", s),
                Font = "Roboto",
                FontSize = 12,
                FontStyle = "Bold",
                HTextAlign = "Right",
                Color = Colors.Black,
                Position = {25, 155 + (s * 20)},
                Size = {100, 20}
            }
        )
    end

    -- Dest Ports
    for d = 1, 2 do
        layout["VideoDestSource " .. d] = {
            PrettyName = string.format("Dest%02i~Source", d),
            Style = "Text",
            Color = {223, 0, 36},
            Position = {100, 346 + (d * 20)},
            Size = {36, 16}
        }
    end
    layout["VideoDestSourceAll"] = {
        PrettyName = "DestAll~Source",
        Style = "Text",
        Color = {223, 0, 36},
        Position = {100, 346},
        Size = {36, 16}
    }

    return layout, graphics
end

if Controls then
    -- Local Structure for holding State
    LW3 = {
        Host = "",
        Port = 6107,
        Rx = ""
    }

    -- Build TCP Client
    conn = TcpSocket.New()
    conn.ReadTimeout = 0
    conn.WriteTimeout = 0
    conn.ReconnectTimeout = 5

    -- Create and setup the Communications Timeout
    timerComms = Timer.New()
    timerComms.EventHandler = function(timer)
        timer:Stop()
        Controls.Online.Boolean = false
        print("Connection Timed Out")
        conn:Disconnect()
        fnConnect()
    end

    -- Create and setup Polling
    timerPoll = Timer.New()

    timerPoll.EventHandler = function(timer)
        fnPoll()
    end

    function fnInitPoll()
        timerPoll:Stop()
        timerPoll:Start(20)
    end

    function fnPoll()
        -- No need for Polling - tested device returns UpTime each second
        --fnSend("GET", "/.*")
    end

    -- Data Sending Helper Function
    function fnSend(cmd, arg)
        -- Build Packet
        local toSend = cmd .. " " .. arg
        -- Send to device
        print("-->LW::" .. toSend)
        conn:Write(toSend .. "\x0D\x0A")
        -- Reset Polling
        fnInitPoll()
    end

    -- Setup Utility Callbacks as required
    conn.Connected = function(conn)
        print("TCP socket is connected")

        -- Get Meta Data
        fnSend("GET", "/.*")

        -- Get and Subscribe to System State Data
        fnSend("GET", "/MANAGEMENT/STATUS.*")
        fnSend("OPEN", "/MANAGEMENT/STATUS.*")

        -- Get and Subscribe to Video Routing Data
        fnSend("GET", "/MEDIA/VIDEO/XP.*")
        fnSend("OPEN", "/MEDIA/VIDEO/XP.*")
    end
    conn.Reconnect = function(conn)
        print("TCP socket is reconnecting")
    end
    conn.Closed = function(conn)
        print("TCP socket was closed by the remote end")
    end
    conn.Error = function(conn, err)
        print("TCP socket had an error:" .. err)
    end
    conn.Timeout = function(conn, err)
        print("TCP socket timed out:" .. err)
    end

    -- Helper Function - Open TCP Connection
    function fnConnect()
        print("TCP Socket Connecting")
        -- Open Connection
        conn:Connect(LW3.Host, LW3.Port)
        -- Set IP address value
        if Controls.IPAddress then
            Controls.IPAddress.String = LW3.Host .. ":" .. LW3.Port
        end
    end

    local function split(str, delim)
        local result = {}
        for part in str:gmatch("[^" .. delim .. "]+") do
            result[#result + 1] = part
        end
        return result
    end

    -- Setup Data Callbacks as required
    conn.Data = function(conn)
        -- Read out lines from the buffer
        line = conn:ReadLine(TcpSocket.EOL.Any)
        while (line ~= nil) do
            -- Print Line
            --print(line)
            -- Remove the header
            x = line:find(" ")
            if x ~= nil then
                line = line:sub(x + 1)
            end
            -- Get Path if "." is present
            x = line:find("%.")
            y = line:find("%=")
            if x ~= nil and y ~= nil then
                path = line:sub(1, x - 1)
                func = line:sub(x + 1, y - 1)
                val = line:sub(y + 1)
                -- Select Command Path
                if path == "/" then -- Root
                    -- System Status
                    -- Part Number
                    if func == "PartNumber" then
                    --Controls.PartNumber.String = val
                    end
                    -- Serial Number
                    if func == "SerialNumber" then
                        Controls.SerialNumber.String = val
                    end
                    -- Product Name
                    if func == "ProductName" then
                        Controls.Model.String = val
                    end
                elseif path == "/MANAGEMENT/STATUS" then -- Managemnt Status
                    -- Uptime
                    if func == "UpTime" then
                        --Controls.UpTime.Value = val
                        -- Stop and restart Comms timer
                        timerComms:Stop()
                        if Controls.Online then -- Check for when developing in a Control Script block
                            Controls.Online.Boolean = true
                        end
                        timerComms:Start(30)
                    end
                    -- Firmware
                    if func == "CpuFirmware" then
                        Controls.SoftwareVersion.String = val
                    end
                elseif path == "/MEDIA/VIDEO/XP" then -- Video Crosspoint
                    if func == "SourcePortStatus" then -- Contains byte level data for Source Ports
                        for p, data in ipairs(split(val, ";")) do
                            -- Mute State
                            --Controls["VideoSourceMute"..p] = (data:sub(1, 1) == "M" or data:sub(1, 1) == "U")
                            -- Lock State
                            --Controls["VideoSourceLock"..p] = (data:sub(1, 1) == "L" or data:sub(1, 1) == "U")
                            -- Enbedded Audio
                            --Controls["VideoSourceEmbeddedAudio"..p] = (data:sub(4, 4) == "E" or data:sub(4, 4) == "F")
                            -- HDCP Status
                            --Controls["VideoSourceHDCPStatus"..p] = (data:sub(4, 4) == "B" or data:sub(4, 4) == "F")
                            -- Signal Present
                            Controls["VideoSourceSignal"][p].Value = (data:sub(5, 5) == "F")
                            -- Connection Status
                            --Controls["VideoSourceConnection"..p] = (data:sub(5, 5) == "B" or data:sub(5, 5) == "F")
                        end
                    elseif func == "DestinationPortStatus" then -- Contains byte level data for Source Ports
                        for p, data in ipairs(split(val, ";")) do
                            -- Mute State
                            --Controls["VideoDestMute"..p] = (data:sub(1, 1) == "M" or data:sub(1, 1) == "U")
                            -- Lock State
                            --Controls["VideoDestLock"..p] = (data:sub(1, 1) == "L" or data:sub(1, 1) == "U")
                            -- Enbedded Audio
                            --Controls["VideoDestEmbeddedAudio"..p] = (data:sub(4, 4) == "E" or data:sub(4, 4) == "F")
                            -- HDCP Status
                            --Controls["VideoDestHDCPStatus"..p] = (data:sub(4, 4) == "B" or data:sub(4, 4) == "F")
                            -- Signal Present
                            --Controls["VideoDestSignal"..p] = (data:sub(5, 5) == "F")
                            -- Connection Status
                            --Controls["VideoDestConnection"..p] = (data:sub(5, 5) == "B" or data:sub(5, 5) == "F")
                        end
                    end
                end
            end
            -- Read a new line
            line = conn:ReadLine(TcpSocket.EOL.Any)
        end
    end

    -- Set IP address from Properties if present
    if Properties then
        if Properties["IP Address"].Value ~= "" then
            LW3.Host = Properties["IP Address"].Value
            fnConnect()
        else
            print("IP Address Property Not Set")
        end
    end

    -- Loop through all Contgrols and setup Event Handlers
    for k, v in pairs(Controls) do
        -- Setup anything with "Source..."
        if k == "VideoDestSourceAll" then
            v.EventHandler = function(changedControl)
                -- Debug Out
                print("Switch " .. changedControl.Value .. " -> All")
                -- Send command
                fnSend("CALL", "/MEDIA/VIDEO/XP:switchAll(I" .. math.tointeger(changedControl.Value) .. ")")
            end
        elseif k == "VideoDestSource" then -- Setup for individual source selection
            -- Get Output Number
            for s = 1, 2 do
                v[s].EventHandler = function(changedControl)
                    -- Debug Out
                    print("Switch " .. changedControl.Value .. string.format(" -> %02i", s))
                    -- Send Command
                    fnSend(
                        "CALL",
                        "/MEDIA/VIDEO/XP:switch(I" .. math.tointeger(changedControl.Value) .. string.format(":O%i)", s)
                    )
                end
            end
        end
    end
end
